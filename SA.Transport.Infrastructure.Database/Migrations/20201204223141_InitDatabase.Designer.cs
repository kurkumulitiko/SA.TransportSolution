// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SA.Transport.Infrastructure.Database;

namespace SA.Transport.Infrastructure.Database.Migrations
{
    [DbContext(typeof(TransportDBContext))]
    [Migration("20201204223141_InitDatabase")]
    partial class InitDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SA.Transport.Core.Domain.Model.Color", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("Colors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("011f6864-ebc0-4b90-b086-171338138128"),
                            Name = "თეთრი"
                        },
                        new
                        {
                            Id = new Guid("5dd1f2cf-4be3-4e35-9de8-94517d20b430"),
                            Name = "ვერცხლისფერი"
                        },
                        new
                        {
                            Id = new Guid("abdf990e-4c5c-4da6-bf9d-74acf211389b"),
                            Name = "შავი"
                        },
                        new
                        {
                            Id = new Guid("1d8df33e-b122-40d7-81fa-96bd9f6fe28c"),
                            Name = "ლურჯი"
                        },
                        new
                        {
                            Id = new Guid("37510c12-15e1-43ff-a698-ae13fab578cb"),
                            Name = "წითელი"
                        });
                });

            modelBuilder.Entity("SA.Transport.Core.Domain.Model.FuelType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("FuelTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7de331c8-a8f0-4ecd-9391-a3eabff2ac4e"),
                            Type = "ბენზინი"
                        },
                        new
                        {
                            Id = new Guid("545721d4-3e3d-4f28-9980-aaf97f4f86bd"),
                            Type = "ელექტრო"
                        },
                        new
                        {
                            Id = new Guid("0de7c688-10bb-4ae2-98ff-363126680486"),
                            Type = "გაზი"
                        },
                        new
                        {
                            Id = new Guid("1c37af91-a690-43ef-89c0-9ff4e0ba9198"),
                            Type = "დიზელი"
                        });
                });

            modelBuilder.Entity("SA.Transport.Core.Domain.Model.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PN")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("PN")
                        .IsUnique();

                    b.ToTable("People");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f8df66c6-4efa-460e-951e-993ceb79e5f2"),
                            FirstName = "გიორგი",
                            LastName = "გიორგაძე",
                            PN = "00000000000"
                        },
                        new
                        {
                            Id = new Guid("11181dfb-55c9-4333-9be6-d1c25afc654c"),
                            FirstName = "ნინო",
                            LastName = "ნინიძე",
                            PN = "11111111111"
                        },
                        new
                        {
                            Id = new Guid("1a58910b-7436-4757-b77d-eed5e584af8b"),
                            FirstName = "ხატია",
                            LastName = "ხატიაშვილი",
                            PN = "22222222222"
                        });
                });

            modelBuilder.Entity("SA.Transport.Core.Domain.Model.Transport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ColorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MakeEN")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("MakeGE")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ModelEN")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ModelGE")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("PhotoName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VinCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.ToTable("Transports");

                    b.HasData(
                        new
                        {
                            Id = new Guid("03a8858c-c3c8-470c-bd6c-92219fe000c3"),
                            ColorId = new Guid("011f6864-ebc0-4b90-b086-171338138128"),
                            CreateDate = new DateTime(2017, 12, 5, 0, 0, 0, 0, DateTimeKind.Local),
                            MakeEN = "Ford",
                            MakeGE = "ფორდი",
                            ModelEN = "Fusion",
                            ModelGE = "ფუჯნ",
                            Number = "TE-111-ST",
                            VinCode = "1111"
                        },
                        new
                        {
                            Id = new Guid("3c4a2fe1-ab0d-495f-943c-42fbe65c295b"),
                            ColorId = new Guid("abdf990e-4c5c-4da6-bf9d-74acf211389b"),
                            CreateDate = new DateTime(2015, 12, 5, 0, 0, 0, 0, DateTimeKind.Local),
                            MakeEN = "Mercedes",
                            MakeGE = "მერსედესი",
                            ModelEN = "A-Klasse",
                            ModelGE = "ა-კლასი",
                            Number = "TE-222-ST",
                            VinCode = "2222"
                        });
                });

            modelBuilder.Entity("SA.Transport.Core.Domain.Model.TransportFuelType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FuelTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TransportId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FuelTypeId");

                    b.HasIndex("TransportId");

                    b.ToTable("TransportFuelType");

                    b.HasData(
                        new
                        {
                            Id = new Guid("05eba01b-a3ce-45b1-b7db-1ddedbd0ff69"),
                            FuelTypeId = new Guid("7de331c8-a8f0-4ecd-9391-a3eabff2ac4e"),
                            StartDate = new DateTime(2017, 12, 5, 0, 0, 0, 0, DateTimeKind.Local),
                            TransportId = new Guid("03a8858c-c3c8-470c-bd6c-92219fe000c3")
                        },
                        new
                        {
                            Id = new Guid("4d8978b4-2f11-4b4e-87a5-df0e2bda0c7a"),
                            FuelTypeId = new Guid("545721d4-3e3d-4f28-9980-aaf97f4f86bd"),
                            StartDate = new DateTime(2017, 12, 5, 0, 0, 0, 0, DateTimeKind.Local),
                            TransportId = new Guid("03a8858c-c3c8-470c-bd6c-92219fe000c3")
                        },
                        new
                        {
                            Id = new Guid("2d5b8bd1-c0e0-48c6-9999-a9b5552a140f"),
                            FuelTypeId = new Guid("7de331c8-a8f0-4ecd-9391-a3eabff2ac4e"),
                            StartDate = new DateTime(2015, 12, 5, 0, 0, 0, 0, DateTimeKind.Local),
                            TransportId = new Guid("3c4a2fe1-ab0d-495f-943c-42fbe65c295b")
                        });
                });

            modelBuilder.Entity("SA.Transport.Core.Domain.Model.TransportOwner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TransportId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("TransportId");

                    b.ToTable("TransportOwners");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1a14a1c8-c253-4ba0-af77-1f4dc42b8ece"),
                            PersonId = new Guid("f8df66c6-4efa-460e-951e-993ceb79e5f2"),
                            StartDate = new DateTime(2020, 5, 5, 2, 31, 41, 287, DateTimeKind.Local).AddTicks(1867),
                            TransportId = new Guid("03a8858c-c3c8-470c-bd6c-92219fe000c3")
                        },
                        new
                        {
                            Id = new Guid("fb1b0ac6-1e10-4e7d-9400-9d1ead8d6383"),
                            PersonId = new Guid("11181dfb-55c9-4333-9be6-d1c25afc654c"),
                            StartDate = new DateTime(2019, 12, 5, 2, 31, 41, 287, DateTimeKind.Local).AddTicks(2509),
                            TransportId = new Guid("3c4a2fe1-ab0d-495f-943c-42fbe65c295b")
                        },
                        new
                        {
                            Id = new Guid("5a02ea75-dcd6-4148-bfcd-a9548b103753"),
                            PersonId = new Guid("1a58910b-7436-4757-b77d-eed5e584af8b"),
                            StartDate = new DateTime(2020, 9, 5, 2, 31, 41, 287, DateTimeKind.Local).AddTicks(2531),
                            TransportId = new Guid("3c4a2fe1-ab0d-495f-943c-42fbe65c295b")
                        });
                });

            modelBuilder.Entity("SA.Transport.Core.Domain.Model.Transport", b =>
                {
                    b.HasOne("SA.Transport.Core.Domain.Model.Color", "Color")
                        .WithMany("Transports")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SA.Transport.Core.Domain.Model.TransportFuelType", b =>
                {
                    b.HasOne("SA.Transport.Core.Domain.Model.FuelType", "FuelType")
                        .WithMany("Transports")
                        .HasForeignKey("FuelTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SA.Transport.Core.Domain.Model.Transport", "Transport")
                        .WithMany("FuelTypes")
                        .HasForeignKey("TransportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SA.Transport.Core.Domain.Model.TransportOwner", b =>
                {
                    b.HasOne("SA.Transport.Core.Domain.Model.Person", "Person")
                        .WithMany("Transports")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SA.Transport.Core.Domain.Model.Transport", "Transport")
                        .WithMany("Owners")
                        .HasForeignKey("TransportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
